<?php

namespace {{ target_namespace }}\Controller\Generated;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\Form\Form;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\HttpFoundation\Request;
use FOS\RestBundle\Controller\Annotations\QueryParam;
use FOS\RestBundle\Controller\Annotations\RouteResource;
use FOS\RestBundle\Controller\Annotations\View;
use FOS\RestBundle\Request\ParamFetcherInterface;
use FOS\RestBundle\View\View as FOSView;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\ParamConverter;
use Symfony\Component\HttpFoundation\Response;
use Voryx\RESTGeneratorBundle\Serialization\DataTables;
use Doctrine\Common\Inflector\Inflector;

/**
 * Base controller for all the rest controllers.
 * Includes methods from Voryx controller.
 * https://github.com/voryx/restgeneratorbundle/blob/master/src/Voryx/RESTGeneratorBundle/Controller/VoryxController.php
 */
abstract class NoIncBaseRESTController extends Controller
{
    /**
     * Get an entity.
     * 
     * @param $entity
     * 
     * @return Response
     */
    public function get($entity)
    {
        return $entity;
    }
    
    /**
     * Get all entities.
     *
     * @return Response
     */
    public function cget()
    {
        try {
            $repository = $this->getDoctrine()->getManager()->getRepository('NoIncQrisDataBundle:' . $this->getEntityName());
            $entities = $repository->findAll();
            return $entities;
        } catch (\Exception $e) {
        	return FOSView::create($e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
    * Get all entities that are children of given entity.
    *
    * @param $entity the parent entity under which the collection being retrieved is nested
    *
    * @return Response
    */
    public function cgetByParent($entity)
    {
        $getter = "get" . Inflector::pluralize($this->getEntityName());
        return $entity->{$getter}();
    }

    /**
     * Create an entity.
     *
     * @param Request $request
     * @param string $form_class
     * @param $entity
     *
     * @return Response
     */
    public function post(Request $request, $form_class, $entity)
    {
    	$form = $this->createForm($form_class, $entity, ["method" => $request->getMethod()]);
        $this->removeExtraFields($request, $form);
        $form->handleRequest($request);

        if ($form->isValid()) {
            $em = $this->getDoctrine()->getManager();
            $em->persist($entity);
            $em->flush();

            return $entity;
        }

        return FOSView::create(['errors' => $form->getErrors()], Response::HTTP_INTERNAL_SERVER_ERROR);
    }

    /**
     * Partial Update to an entity.
     *
     * @param Request $request
     * @param string $form_class
     * @param $entity
     *
     * @return Response
     */
    public function patch(Request $request, $form_class, $entity)
    {
        try {
            $form = $this->createForm($form_class, $entity, ["method" => $request->getMethod()]);
            $em = $this->getDoctrine()->getManager();
            $this->removeExtraFields($request, $form);
            $form->handleRequest($request);
            
            if ($form->isValid()) {
                $em->flush();
                return $entity;
            }

            return FOSView::create(['errors' => $form->getErrors()], Response::HTTP_INTERNAL_SERVER_ERROR);
        } catch (\Exception $e) {
            return FOSView::create($e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Delete an entity.
     *
     * @param Request $request
     * @param $entity
     *
     * @return Response
     */
    public function delete(Request $request, $entity)
    {
        try {
            $em = $this->getDoctrine()->getManager();
            $em->remove($entity);
            $em->flush();

            return null;
        } catch (\Exception $e) {
            return FOSView::create($e->getMessage(), Response::HTTP_INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Create a form without a name
     *
     * @param null $type
     * @param null $data
     * @param array $options
     *
     * @return Form|FormInterface
     */
    public function createForm($type = null, $data = null, array $options = array())
    {
    	$form = $this->container->get('form.factory')->createNamed(
    		null, //since we're not including the form name in the request, set this to null
    		$type,
    		$data,
    		$options
    	);
    
    	return $form;
    }
    
    /**
     * Get rid on any fields that don't appear in the form
     *
     * @param Request $request
     * @param Form $form
     */
    protected function removeExtraFields(Request $request, Form $form)
    {
    	$data     = $request->request->all();
    	$children = $form->all();
    	$data     = array_intersect_key($data, $children);
    	$request->request->replace($data);
    }
    
    abstract function getEntityName();
}
